package Day14;

public class Day14_2 {
public static void main(String[] args) {
	
	// 클래스 멤버
		// 1. 필드
			// 1. 접근제한자 (생략시 default)
				// private : 현재 클래스내에서 사용가능 -> 필드의 직접접근 제한[아무곳에서나 필드에 저장/호출시 무결성 X]  		
				// public  : 모든 클래스내에서 사용가능 -> 
				// default : 동일 패키지내
				// protected : 동일한 패키지[폴더]내 (* 단 : 서로 다른 패키지의 슈퍼클래스 접근 가능)
			// * : static , final (상수, 고정값)
			// 2. 자료형(클래스, 기본자료형) : 기본자료형 [int, double...] , 클래스 (사용자가 만든 클래스, 미리 만들어진 클래스(API)), 인터페이스, 배열
			// 3. 변수명(객체명) : 본인 원하는대로 하지만, 중복이름은 피하자!
			// * 변수
		// 2. 생성자 : 객체 생성시 (초기값 = 처음값) 사용
			// 1. 접근제한자
			// 2. 생성자이름 = 클래스이름 [ 만일 다를경우 오류 ]
			// 3. 인수[매개변수]
				// 필요에 따른 인수 선택
				// 1. 빈생성자 [관례적 목적 : 메소드 호출용(메소드 호출시 객체필요!!)]
				// 2. 모든필드생성자 [관례적 목적 : 몇가지의 필드만 저장]
				// 3. 특정필드생성자 [ 몇 가지의 필드만 저장 ] : 상황에 따른 객체 생성시 들어가는 필드
	
		// 3. 메소드
			// 1. 접근제한자
			// 2. 반환자료형 : void(메소드 종료시 돌려주는 값 없음)
			// 3. 메소드이름 : 아무거나 해도 되지만 관례적으로 소문자사용
			// 4. 인수[매개변수] : 메소드 호출시 메소드 안으로 들어오는 데이터들, 객체명.메소드(3) -> 메소드 (int 변수명)
							// 인수의 자료형을 동일하되 면수명은 자유
							// 객체명.메소드(유재석) -> 메소드 (int 변수명) : X
	}
}
