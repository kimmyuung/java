package Day15;

public class Day15_2 {
	// 인터페이스
		// 동일한 목적의 여러(서로다른) 객체를 조작
	// 인터페이스의 멤버
		// 1. 상수필드
		// 2. 추상메소드
		// 3. 디폴트메소드
		// 4. 정적메소드
	// 2. 사용방법
		// public class 클래스명 implements 인터페이스명
		// !필수 : 추상메소드 구현
	// 3. 구현객체 생성
		// 클래스로부터 메모리 할당 받으면
	// 4. 익명객체 생성
		// 인터페이스에서 직접 구현
	public static void main(String[] args) {
		게임패드 pad1 = new 단풍이야기();
		// 인터페이스명 객체명 = new 구현한클래스명();
		// 구현을 한 클래스로 객체를 만들면 구현객체를 만든 것
		
		// 익명객체 만들기 : 구현한 메소드를 재사용 불가
		// 인터페이스명 객체명 = new 인터페이스명() {추상메소드 구현};
		게임패드 pad2 = new 게임패드() {
			@Override
			public void 위() {}
			@Override
			public void 왼쪽() {}
			@Override
			public void 오른쪽() {}
			@Override
			public void 아래() {}
		};
//		pad1 = new 피파();
		
		게임 g1 = new 게임();
	//	g1 = new 단풍이야기(); // 게임 교체
	//	g1 = new 피파();
		
		//////////////////////////////
		// 			상속 		vs		인터페이스
	// 연결수			1				여러개
	// @override	재정의(수정)		구현(정의)
	// 다형성			부모<-자식			부모<-자식
	// 목적			빠른 설계			동일 목적 클래스들의 
		//							서로 다른 기능 구현(추상)	
							
	}
}
